Q: How can you get all four blades to rotate with just one time-dependent rotation matrix?
A: Time * 2 * Pi, Time * Pi / 2, Time * Pi, -(Time * Pi/2), i.e adjust the
rotaion py 90degrees for each wing 

Q: How do you make the wings follow the body's movements?
A: apply same translations/rotations or whatever transformation is applied to
the body

Q: What kind of control did you implement?
A: keyboard + mouse 

Q: Can you make this kind of control in some other way than manipulating a "look-at" matrix?
A: no

Q: How did you handle the camera matrix for the skybox?
A: convert it to mat3, then back to mat4 to remove the translation. We also
	 don't apply model to world matrices (use an I matrix instead) since we dont
	 really want to place the skybox in the world

Q: How did you represent the objects? Is this a good way to manage a scene or
	 would you do it differently for a "real" application?
A: Each object is it's own model, with it's own model to world matrix. Not sure
   what a better way would be but one could probably generalize the ModelToWorld
   matrix so you just need to bundle the model with some basic data and pass that
   along perhaps?

	 at the very least bundle all the various data objects into a single struct
	 for world entities
   
Q: What special considerations are needed when rendering a skybox?
A: Do not apply lighting, do not apply translation, do not place it in the
	 world. Also disable Z-depth tests and backface culling

Q: Why was blue facing the camera when visualizing the normal vectors?
A: Because they point towards you (Z is blue) 

Q: For light source 3, why did we get a white area in the distance for the specular light but not for the diffuse?
A: Describe in person 

Q: How do you generate a vector from the surface to the eye?
A: When a vertex is converted model -> world -> view, we know that the camera
	 position is always 0,0,0, so we can simply take the negated surface position as
	 the directional vector

Q: Which vectors need renormalization in the fragment shader?
A: Whichever vector we translate world->view whitin the fragment shader, needs
	 to be renormalized 

